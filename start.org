#+TITLE: Emacs 24 configuration for Clinton Dreisbach
#+AUTHOR: Clinton Dreisbach
#+EMAIL: clinton@dreisbach.us
#+OPTIONS: toc:2 num:nil

* Introduction
** Standards
   Emacs does not have namespaces, so you should come up with some
   prefix for your variables and functions to avoid
   conflicts. Luckily, =/= is a valid character in Emacs symbols, so I
   emulate Clojure namespaces by using this. I use the prefix =cnd=
   (my initials), so a custom function I write would have a name like
   this: =cnd/gain-ultimate-power=.

** Inspirations
   - https://github.com/avdi/.emacs24.d
   - http://technomancy.us/153
   - http://pavpanchekha.com/blog/emacs.html
   - http://senny.github.com/cabbage/
   - https://sam217pa.github.io/2016/09/02/how-to-build-your-own-spacemacs/
     
* Personal Info
   Emacs will try and guess information about you from your
   environment. I prefer to be explicit about it.

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Clinton N. Dreisbach")
  (setq user-mail-address "clinton@dreisbach.us")
#+END_SRC

* Basic Configuration
** Setup use-package

#+BEGIN_SRC emacs-lisp
  (eval-when-compile
    (require 'use-package))
  (require 'diminish)                ;; if you use :diminish
  (require 'bind-key)    
#+END_SRC

** Must-Haves
  There are a few settings that any user of Emacs should have. You do
  want the power of =cl=, which brings in a lot of Common Lisp's
  methods.  You do want Emacs to reload changed files if you haven't
  also changed them in Emacs (=global-auto-revert-mode=). You want
  winner-mode, because you are a winner.

  We want to use UTF-8 for all text.

#+BEGIN_SRC emacs-lisp
  (require 'cl)
  (global-auto-revert-mode t)
  (winner-mode t)

  (setq coding-system-for-read 'utf-8)
  (setq coding-system-for-write 'utf-8)
#+END_SRC

** GUI Settings
  Emacs' default GUI settings are not great and cause it to not
  resemble a modern application. Luckily, they are very
  configurable.

#+BEGIN_SRC emacs-lisp
  (setq
   ;; Do not show a splash screen.
   inhibit-splash-screen t
   ;; Show incomplete commands while typing them.
   echo-keystrokes 0.1
   ;; Never show dialog boxes.
   use-dialog-box nil)

  (setq-default
   ;; Make the cursor a thin vertical line.
   cursor-type 'bar
   ;; Show the end of files inside buffers.
   indicate-empty-lines t)

  ;; Show what text is selected.
  (transient-mark-mode t)
  ;; And delete selected text if we type over it.
  (delete-selection-mode t)

  ;; Always show matching sets of parentheses.
  (show-paren-mode t)

  ;; Highlight the current line.
  (global-hl-line-mode t)

  ;; Hide the scroll bar, tool bar, and menu bar.
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)

  ;; Allow us to type "y" or "n" instead of "yes" or "no".
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; Show the end of files.
  (when (not indicate-empty-lines)
    (toggle-indicate-empty-lines))

  (when window-system
    ;; Make the window title reflect the current buffer.
    (setq frame-title-format '(buffer-file-name "%f" ("%b"))))
#+END_SRC

** Modeline Improvements
   I like having the column number in my modeline to help with stack
   traces and just as a sanity check.

#+BEGIN_SRC emacs-lisp
  (setq column-number-mode t)
#+END_SRC

** Files and Directories
  I like to set up a vendor directory for any random elisp files I
  pull in. I get the majority of my functionality from packages
  distributed through ELPA or Marmalade, but sometimes, you find
  something random on EmacsWiki that you may want to pull in. After
  adding that directory, you're going to want to throw it in your
  load-path. Often, you'll have subdirectories in your vendor
  directory. Go ahead and add those to the load-path as well.

#+BEGIN_SRC emacs-lisp
  (defvar cnd/vendor-dir (expand-file-name "vendor" user-emacs-directory)
    "Location of any random elisp files I find from other authors.")
  (add-to-list 'load-path cnd/vendor-dir)

  (dolist (project (directory-files cnd/vendor-dir t "\\w+"))
    (when (file-directory-p project)
      (add-to-list 'load-path project)))
#+END_SRC

** Shells
  I use fish shell, but Emacs should not internally.

  #+BEGIN_SRC emacs-lisp
    (setq explicit-shell-file-name "/bin/sh")
    (setq shell-file-name "sh")
    (setenv "SHELL" shell-file-name)
  #+END_SRC

  =C-d= on an empty line in the shell terminates the current
  process. Using the following, hitting =C-d= again will close the
  buffer.

#+begin_src emacs-lisp
  ;; From http://whattheemacsd.com/setup-shell.el-01.html

  (defun comint-delchar-or-eof-or-kill-buffer (arg)
    (interactive "p")
    (if (null (get-buffer-process (current-buffer)))
        (kill-buffer)
      (comint-delchar-or-maybe-eof arg)))

  (add-hook 'shell-mode-hook
            (lambda ()
              (define-key shell-mode-map
                (kbd "C-d") 'comint-delchar-or-eof-or-kill-buffer)))
#+end_src

** Backups
   Default Emacs behavior around backups dates from a time of
   barbarism and should be avoided. On the other hand, it's saved me
   once or twice. Therefore, I allow Emacs to keep backups, but
   instead of keeping them in the same directory as the file being
   edited, I force them to be kept in a temporary directory.

#+BEGIN_SRC emacs-lisp
  (setq delete-old-versions -1)  ; delete excess backup versions silently
  (setq version-control t)       ; use version control
  (setq vc-make-backup-files t)  ; make backups file even when in version controlled dir
  (setq backup-directory-alist `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
#+END_SRC

** File Behavior
   All files should end with a final newline.

#+BEGIN_SRC emacs-lisp
  (setq require-final-newline t)
#+END_SRC

** Indentation
   By default, I want to indent with 4 spaces and no tabs, and wrap at 80 characters.

#+begin_src emacs-lisp
  (setq-default indent-tabs-mode nil
                tab-width 4)
  (setq-default fill-column 80)
#+end_src

** Functions
#+BEGIN_SRC emacs-lisp
  (defun cnd/clean-buffer-safe ()
    "Cleanup whitespace and make sure we are using UTF-8."
    (save-excursion
      (whitespace-cleanup-region (point-min) (point-max))
      (set-buffer-file-coding-system 'utf-8)))

  (defun cnd/clean-buffer ()
    "Re-indent the entire buffer and cleanup whitespace."
    (interactive)
    (save-excursion
      (indent-region (point-min) (point-max) nil)
      (cnd/clean-buffer-safe)))

  (defun cnd/rename-current-buffer-file ()
    "Renames current buffer and file it is visiting. From http://whattheemacsd.com/file-defuns.el-01.html."
    (interactive)
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          (error "Buffer '%s' is not visiting a file!" name)
        (let ((new-name (read-file-name "New name: " filename)))
          (if (get-buffer new-name)
              (error "A buffer named '%s' already exists!" new-name)
            (rename-file filename new-name 1)
            (rename-buffer new-name)
            (set-visited-file-name new-name)
            (set-buffer-modified-p nil)
            (message "File '%s' successfully renamed to '%s'"
                     name (file-name-nondirectory new-name)))))))

  (defun cnd/kill-current-buffer-file ()
    "Removes file connected to current buffer and kills buffer. From http://whattheemacsd.com/file-defuns.el-02.html."
    (interactive)
    (let ((filename (buffer-file-name))
          (buffer (current-buffer))
          (name (buffer-name)))
      (if (not (and filename (file-exists-p filename)))
          (ido-kill-buffer)
        (when (yes-or-no-p "Are you sure you want to remove this file? ")
          (delete-file filename)
          (kill-buffer buffer)
          (message "File '%s' successfully removed" filename)))))

  (defun cnd/increase-font-size ()
    (interactive)
    (set-face-attribute 'default
                        nil
                        :height
                        (ceiling (* 1.10
                                    (face-attribute 'default :height)))))

  (defun cnd/decrease-font-size ()
    (interactive)
    (set-face-attribute 'default
                        nil
                        :height
                        (floor (* 0.9
                                  (face-attribute 'default :height)))))

  (defun cnd/save-buffer-always ()
    "Save the buffer even if it is not modified."
    (interactive)
    (set-buffer-modified-p t)
    (save-buffer))

  (defun cnd/edit-config ()
    (interactive)
    (find-file "~/.emacs.d/start.org"))

  (defun cnd/reload-config ()
    (interactive)
    (load-file "~/.emacs.d/init.el"))

  ;; All below from http://whattheemacsd.com/

  (defun cnd/move-line-down ()
    (interactive)
    (let ((col (current-column)))
      (save-excursion
        (forward-line)
        (transpose-lines 1))
      (forward-line)
      (move-to-column col)))

  (defun cnd/move-line-up ()
    (interactive)
    (let ((col (current-column)))
      (save-excursion
        (forward-line)
        (transpose-lines -1))
      (move-to-column col)))

  (defun cnd/open-line-below ()
    (interactive)
    (end-of-line)
    (newline)
    (indent-for-tab-command))

  (defun cnd/open-line-above ()
    (interactive)
    (beginning-of-line)
    (newline)
    (forward-line -1)
    (indent-for-tab-command))
#+END_SRC

* Package Management
** use-package
   =use-package= helps us organize the packages we want and configure them.

#+BEGIN_SRC emacs-lisp
  ;; tells emacs not to load any packages before starting up
  (setq package-enable-at-startup nil)

  ;; the following lines tell emacs where on the internet to look up
  ;; for new packages.
  (setq package-archives '(("org"       . "http://orgmode.org/elpa/")
                           ("gnu"       . "http://elpa.gnu.org/packages/")
                           ("melpa"     . "https://melpa.org/packages/")
                           ("marmalade" . "http://marmalade-repo.org/packages/")))
  (package-initialize)

  ;; Bootstrap =use-package=
  (unless (package-installed-p 'use-package) ; unless it is already installed
    (package-refresh-contents)
    (package-install 'use-package))

  (require 'use-package)
#+END_SRC

* Package Configuration
** general
   Better key bindings.
#+BEGIN_SRC emacs-lisp
  (use-package general :ensure t)
#+END_SRC
   
** which-key
   Show all key bindings associated with the prefix I have typed.

#+BEGIN_SRC emacs-lisp
  (use-package which-key :ensure t
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (which-key-setup-side-window-right-bottom)
    (setq which-key-sort-order 'which-key-key-order-alpha
          which-key-side-window-max-width 0.33
          which-key-idle-delay 0.05))
#+END_SRC

** ivy and counsel

#+BEGIN_SRC emacs-lisp
  (use-package ivy :ensure t
    :diminish (ivy-mode . "") ; does not display ivy in the modeline
    :init (ivy-mode 1)        ; enable ivy globally at startup
    :config
    (setq ivy-use-virtual-buffers t)   ; extend searching to bookmarks and …
    (setq ivy-height 20)               ; set height of the ivy window
    (setq ivy-count-format "(%d/%d) ") ; count format, from the ivy help page
    )

  (use-package counsel :ensure t
    :bind*                           ; load counsel when pressed
    (("M-x"     . counsel-M-x)       ; M-x use counsel
     ("C-x C-f" . counsel-find-file) ; C-x C-f use counsel-find-file
     ("C-x C-r" . counsel-recentf)   ; search recently edited files
     ("C-c f"   . counsel-git)       ; search for files in git repo
     ("C-c s"   . counsel-git-grep)  ; search for regexp in git repo
     ("C-c /"   . counsel-ag)        ; search for regexp in git repo using ag
     ))
#+END_SRC

** Projectile
   [[https://github.com/bbatsov/projectile][Projectile]] is a package to allow you to search over projects.

#+BEGIN_SRC emacs-lisp
  (use-package projectile :ensure t
    :init (projectile-global-mode))

  (use-package counsel-projectile :ensure t
    :init (counsel-projectile-on))
#+END_SRC

** Snippets
   Yasnippet allows us to have snippets for our most commonly used
   pieces of code.

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet :ensure t
    :init (yas-global-mode 1))
#+END_SRC

** org-mode
#+BEGIN_SRC emacs-lisp
  (use-package org :ensure t
    :config
    (setq org-directory "~/org")
    (setq org-default-notes-file (concat org-directory "/notes.org"))
    (define-key global-map (kbd "C-c c") 'org-capture)
    (define-key global-map (kbd "C-c l") 'org-store-link)

    (setq org-capture-templates
          '(("n" "Note" entry (file org-default-notes-file)
             "* %?\n  %i")
            ("l" "Linked note" entry (file org-default-notes-file)
             "* %?\n  %i\n  %a")
            ("t" "Todo" entry (file org-default-notes-file)
             "* TODO %?\n  %i\n  %a")
            )))
#+END_SRC

** auto-complete

#+BEGIN_SRC emacs-lisp
  (use-package auto-complete :ensure t
    :init (ac-config-default))
#+END_SRC

** Magit

Instead of having magit run next to another window, I like having it
take up the whole frame, so I can take care of all my git stuff at
once and then it can go away. In order for this to work, I have to go
ahead and require magit first.

Source: http://whattheemacsd.com/setup-magit.el-01.html

#+begin_src emacs-lisp
  (use-package magit :ensure t
    :config
    (defadvice magit-status (around magit-fullscreen activate)
      (window-configuration-to-register :magit-fullscreen)
      ad-do-it
      (delete-other-windows))

    (defun magit-quit-session ()
      "Restores the previous window configuration and kills the magit buffer"
      (interactive)
      (kill-buffer)
      (jump-to-register :magit-fullscreen)))
#+end_src

** ag
#+BEGIN_SRC emacs-lisp
  (use-package ag :ensure t)
#+END_SRC
** Programming
*** autopair-mode
   =autopair-mode= automatically adds closing parentheses, brackets,
   and the like, which is very useful when writing code. It doesn't
   get auto-loaded, so I have to require it explicitly.

#+BEGIN_SRC emacs-lisp
  (use-package autopair :ensure t)
#+END_SRC

*** Fish Shell
#+BEGIN_SRC emacs-lisp
  (use-package fish-mode :ensure t
    :mode "\\.fish$")
#+END_SRC
*** Python
#+BEGIN_SRC emacs-lisp
  (use-package python :ensure t
    :mode ("\\.py\\'" . python-mode)

    :bind* (("C-c !" . python-shell-switch-to-shell)
            ("C-c |" . python-shell-send-region))
    :config
    (setq python-indent-offset 4)
    (add-hook 'python-mode-hook 'anaconda-mode)
    (add-hook 'python-mode-hook 'ac-anaconda-setup))

  (use-package anaconda-mode :ensure t
    :commands (anaconda-mode))
#+END_SRC

*** Django

I use =[[https://github.com/davidmiller/pony-mode][pony-mode]]= to enhance Emacs when I'm working with Django.

#+begin_src emacs-lisp
  (use-package pony-mode :ensure t)
#+end_src

*** web-mode
#+BEGIN_SRC emacs-lisp
  (use-package web-mode :ensure t
    :mode ("\\.html?\\'" "\\.mustache\\'" "\\.jsx?\\'" "\\.css\\'")
    :config
    (setq web-mode-content-types-alist
          '(("jsx" . "\\.js[x]?\\'")))
    (setq web-mode-markup-indent-offset 4)
    (setq web-mode-css-indent-offset 4)
    (setq web-mode-code-indent-offset 4))
#+END_SRC
*** golang

#+BEGIN_SRC emacs-lisp
  (defun my-go-mode-hook ()
    ; Call Gofmt before saving
    (add-hook 'before-save-hook 'gofmt-before-save)
    (add-hook 'go-mode-hook 'auto-complete-for-go)
    ; Customize compile command to run go build
    (if (not (string-match "go" compile-command))
        (set (make-local-variable 'compile-command)
             "go build -v && go test -v && go vet"))
    ; Godef jump key binding
    (local-set-key (kbd "M-.") 'godef-jump))

  (defun auto-complete-for-go ()
    (auto-complete-mode 1))

  (use-package go-autocomplete :ensure t)

  (use-package go-mode :ensure t
    :config
    (add-hook 'go-mode-hook 'my-go-mode-hook))
#+END_SRC

* Keybindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c C-c") 'compile)
#+END_SRC
* OS-Specific Settings
** OS X
   Emacs works pretty great on OS X, but there are a few adjustments I
   like. =mdfind= is a command-line interface to Spotlight which works
   great when using the =locate= function in Emacs. =aspell= is used
   instead of =ispell=. Lastly, OS X has annoying issues with the
   =PATH= environment variable. If you launch Emacs as an app instead
   of on the command-line, it will not have the path you set up in
   =.profile= (or wherever you set up your environment variables.)
   Therefore, I set it explicitly.

#+BEGIN_SRC emacs-lisp
  (when (eq system-type 'darwin)
    (setq locate-command "mdfind")
    (setq ispell-program-name "aspell")
    
    (defun set-exec-path-from-shell-PATH ()
      (let ((path-from-shell (shell-command-to-string "$SHELL -i -c 'echo $PATH'")))
        (setenv "PATH" path-from-shell)
        (setq exec-path (split-string path-from-shell path-separator))))

    (when window-system (set-exec-path-from-shell-PATH))

    (set-face-attribute 'default nil
                  :family "Ubuntu Mono" :height 180 :weight 'normal)
    (setq mac-option-key-is-meta t)
    (setq mac-command-key-is-meta t)
    (setq mac-command-modifier 'meta)
    (setq mac-option-modifier 'meta)
    (global-set-key (kbd "M-+") 'cnd/increase-font-size)
    (global-set-key (kbd "M-=") 'cnd/increase-font-size)
    (global-set-key (kbd "M--") 'cnd/decrease-font-size))

  (when (eq system-type 'gnu/linux)
    (global-set-key (kbd "C-=") 'cnd/increase-font-size)
    (global-set-key (kbd "C--") 'cnd/decrease-font-size))

#+END_SRC
* Local Configuration
  No matter how universal your configuration is, you will find
  yourself someday needing to configuration something different for a
  specific computer. I keep that code in =local.el=, which gets loaded
  at the end of my main configuration.

#+BEGIN_SRC emacs-lisp
  (let ((local-config (expand-file-name "local.el" user-emacs-directory)))
    (when (file-exists-p local-config)
      (load local-config)))
#+END_SRC
  
